#!/bin/bash
FEDORA_VENDOR="FEDORA"
FEDORA_BASE_URL='https://download.fedoraproject.org/pub/fedora/linux/releases'
FEDORA_VARIANT_URL_SUFFIX="$LDP_ARCH_CPU/images"
FEDORA_RELEASE_VARIANT_XPATH='//a[not(starts-with(@href, "/")) and not(contains(@href, "?")) and substring(normalize-space(text()), string-length(normalize-space(text())) - string-length("/") + 1, string-length("/")) = "/"]/@href'
FEDORA_RELEASE_VARIANT_REGEX='s/^ href="//;s/"$//;s/\/$//'
FEDORA_RELEASE_IGNORE="^[0-9]\$\|[123][0-9]"
FEDORA_RELEASE_RESULTS_MAX=3
FEDORA_VARIANT_SPECIAL="labs\|spins"
FEDORA_VARIANT_IGNORE="COMPOSE_ID\|Cloud\|Containe\|COSMIC-Atomic\|Everything\|Kinoite\|Onyx\|Sericea\|Silverblue\|\.\."
FEDORA_SUBVARIANT_IGNORE="\.\."
FEDORA_VARIANT_REGEX='s/^\.\///'
FEDORA_IMAGE_FILE_SUFFIX=".${LDP_ARCH_CPU}.raw.xz"
FEDORA_IMAGE_FILE_XPATH="//a[substring(@href, string-length(@href) - string-length('${FEDORA_IMAGE_FILE_SUFFIX}') + 1, ${#FEDORA_IMAGE_FILE_SUFFIX}) = '${FEDORA_IMAGE_FILE_SUFFIX}']/@href"
FEDORA_IMAGE_FILE_REGEX='s/^ href="//;s/"$//'
FEDORA_checkInput(){
	:
}
FEDORA_main(){
	FEDORA_checkInput "$@"
	local release=$1
	local variant=$2
	if [ -z "$(echo "${variant,,}" | grep "$FEDORA_VARIANT_SPECIAL")" ]; then
		local has_subvariant=0
		local block_device=$3
	else
		local has_subvariant=1
		local subvariant=$3
		local block_device=$4
	fi
	local path_url="$FEDORA_BASE_URL"
	if [ ! -z "$release" ]; then
		local path=("${@:1:2}")
		local path_uri=$(IFS=/; echo "${path[*]}")
		local path_url="$path_url/$path_uri"
	fi
	if [ ! -z "$variant" ]; then
		local path_url="$path_url/$FEDORA_VARIANT_URL_SUFFIX"
	fi
	local html=$(wget -O - "$path_url/")
	if [ $? -ne 0 ] || [ -z "$html" ]; then
		echo "$FEDORA_VENDOR $@ is not supported." >&2
		return 1
	fi
	if [ -z "$release" ] || [ -z "$variant" ]; then
		local html_xpath="$FEDORA_RELEASE_VARIANT_XPATH"
	else
		local html_xpath="$FEDORA_IMAGE_FILE_XPATH"
	fi
	local results="$(echo "$html" | xmllint --html --xpath "$html_xpath" - 2>/dev/null)"
	if [ $? -ne 0 ] || [ -z "$results" ]; then
		echo "$FEDORA_VENDOR $@ is not supported." >&2
		return 1
	fi
	local results="$(echo "$results" | sed "$FEDORA_RELEASE_VARIANT_REGEX")"
	if [ -z "$release" ]; then
		echo "$results" | grep -v "$FEDORA_RELEASE_IGNORE" | sort -V | tail -n $FEDORA_RELEASE_RESULTS_MAX
		return $LDP_AUTO
	fi
	if [ -z "$variant" ]; then
		echo "$results" | sed "$FEDORA_VARIANT_REGEX" | grep -v "$FEDORA_VARIANT_IGNORE"
		return $LDP_AUTO
	fi
	if [ $has_subvariant -eq 0 ]; then
		local image="$(echo "$results" | sed "$FEDORA_IMAGE_FILE_REGEX" | head -n 1)"
	else
		if [ -z "$subvariant" ]; then
			echo "$results" | sed "$FEDORA_VARIANT_REGEX" | grep -v "$FEDORA_SUBVARIANT_IGNORE"
			return $LDP_AUTO
		fi
		local image="$(echo "$results" | grep -i "$subvariant" | sed "$FEDORA_IMAGE_FILE_REGEX" | head -n 1)"
	fi
	if [ -z "$image" ]; then
		echo "$FEDORA_VENDOR $@ is not supported." >&2
		exit 1
	fi
	local image_url="$path_url/$image"
	echo "Using image: $image_url" >&2
	if [ -z "$block_device" ]; then
		echo "$LDP_BLOCK_devices"
		return $LDP_AUTO
	else
		_LDP_BLOCK_checkDevice "$block_device"
	fi
	LDP_BLOCK_flashURLRaw "$image_url" "$block_device"
	if [ ! -z "$LDP_GUI_RUN" ]; then
		rm "$LDP_GUI_RUN"
		unset LDP_GUI_RUN
	fi
}
