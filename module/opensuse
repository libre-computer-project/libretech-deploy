#!/bin/bash
OPENSUSE_OPENSUSE_VENDOR="OPENSUSE"
OPENSUSE_BASE_URL='http://download.opensuse.org/ports/aarch64'
OPENSUSE_RELEASE_XPATH='//a[not(starts-with(@href, "/")) and not(contains(@href, "?")) and substring(normalize-space(text()), string-length(normalize-space(text())) - string-length("/") + 1, string-length("/")) = "/"]/text()'
OPENSUSE_RELEASE_REGEX='s/\/$//'
OPENSUSE_RELEASE_RESULTS_MAX=3
OPENSUSE_RELEASE_URL_SUFFIX="appliances"
OPENSUSE_VARIANT_REGEX='s/^ href=".\///;s/"$//'
OPENSUSE_IMAGE_FILE_SUFFIX=".${LDP_ARCH_CPU}.raw.xz"
OPENSUSE_IMAGE_FILE_XPATH="//a[substring(@href, string-length(@href) - string-length('$filename_match') + 1, string-length('$filename_match')) = '$filename_match']/@href"
OPENSUSE_RELEASE_IGNORE="debug\|distribution\|factory\|source\|update"
OPENSUSE_VARIANT_IGNORE="Snapshot"
OPENSUSE_VARIANT_ACCEPT="efi"
OPENSUSE_checkInput(){
	:
}
OPENSUSE_main(){
	OPENSUSE_checkInput "$@"
	local release=$1
	local variant=$2
	local block_device=$3
	local path_url="$OPENSUSE_BASE_URL"
	if [ ! -z "$release" ]; then
		local path=("${@:1:1}")
		local path_uri=$(IFS=/; echo "${path[*]}")
		local path_url="$path_url/$path_uri/$OPENSUSE_RELEASE_URL_SUFFIX"
	fi
	local html=$(wget -O - "$path_url/")
	if [ $? -ne 0 ] || [ -z "$html" ]; then
		echo "$OPENSUSE_VENDOR $@ is not supported." >&2
		return 1
	fi
	if [ -z "$release" ]; then
		local html_xpath="$OPENSUSE_RELEASE_XPATH"
	else
		local html_xpath="$OPENSUSE_IMAGE_FILE_XPATH"
	fi
	local results="$(echo "$html" | xmllint --html --xpath "$html_xpath" - 2>/dev/null)"
	if [ $? -ne 0 ] || [ -z "$results" ]; then
		echo "$OPENSUSE_VENDOR $@ is not supported." >&2
		return 1
	fi
	if [ -z "$release" ]; then
		local results="$(echo "$results" | sed "$OPENSUSE_RELEASE_REGEX")"
		echo "$results" | grep -v "$OPENSUSE_RELEASE_IGNORE" | tail -n $OPENSUSE_RELEASE_RESULTS_MAX
		return $LDP_AUTO
	fi
	local results="$(echo "$results" | sed "$OPENSUSE_VARIANT_REGEX" | grep -v "$OPENSUSE_VARIANT_IGNORE" | grep "$OPENSUSE_VARIANT_ACCEPT" | grep "$OPENSUSE_IMAGE_FILE_SUFFIX\$" | sort | uniq)"
	if [ -z "$variant" ]; then
		echo "$results"
		return $LDP_AUTO
	fi
	local image="$(echo "$results" | grep -i "$variant" | head -n 1)"
	if [ -z "$image" ]; then
		echo "$OPENSUSE_VENDOR $@ is not supported." >&2
		exit 1
	fi
	local image_url="$path_url/$image"
	echo "Using image: $image_url" >&2
	if [ -z "$block_device" ]; then
		echo "$LDP_BLOCK_devices"
		return $LDP_AUTO
	else
		_LDP_BLOCK_checkDevice "$block_device"
	fi
	LDP_BLOCK_flashURLRaw "$image_url" "$block_device"
	if [ ! -z "$LDP_GUI_RUN" ]; then
		rm "$LDP_GUI_RUN"
		unset LDP_GUI_RUN
	fi
}
